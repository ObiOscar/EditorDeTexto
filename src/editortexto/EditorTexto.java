/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editortexto;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.undo.UndoManager;

/**
 *
 * @author OscarFernandezRodriguez
 */
public class EditorTexto extends javax.swing.JFrame {
    boolean archivoGuardado = false;
    String direcciónAbrir = null;
    int x,y;
    

    public EditorTexto() {

        initComponents();
        this.setLocationRelativeTo(null);
        deshacer = new UndoManager();
        jTextArea1.getDocument().addUndoableEditListener(deshacer);     //Cojo lo anterior al desahcaer.
        this.getContentPane().setBackground(Color.lightGray);       //Cambio el color del fondo
        jTextArea1.setBackground(Color.darkGray);       //cambio el color del textArea
        Font fuente = new Font("Dialog", Font.ROMAN_BASELINE, 15);      //predetermino una fuente
        // jTextArea1.setLineWrap(true);                 
        // jTextArea1.setWrapStyleWord(true);
        jTextArea1.setFont(fuente);
        jTextArea1.setForeground(Color.WHITE);
        //   setExtendedState(MAXIMIZED_BOTH);             //para poner en máximo

        this.setTitle("Editor Texto");
        this.setIconImage(new ImageIcon("src\\Imagenes\\iconoWord.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Copiar = new javax.swing.JRadioButtonMenuItem();
        Cortar = new javax.swing.JRadioButtonMenuItem();
        Pegar = new javax.swing.JRadioButtonMenuItem();
        jMenuItemCopiar = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuItem10 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        BotonAbrir = new javax.swing.JButton();
        BotonSalir = new javax.swing.JButton();
        BotonGuardar = new javax.swing.JButton();
        BotonAdelantar = new javax.swing.JButton();
        BotonCortar = new javax.swing.JButton();
        BotonCopiar = new javax.swing.JButton();
        BotonPegar = new javax.swing.JButton();
        BotonRetroceder = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        botonBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        labelMover = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuAbrir = new javax.swing.JMenuItem();
        jMenuGuardar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuSalir = new javax.swing.JMenuItem();
        jMenuEditar = new javax.swing.JMenu();
        jMenuCortar = new javax.swing.JMenuItem();
        jMenuCopiar = new javax.swing.JMenuItem();
        jMenuPegar = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuFuente = new javax.swing.JMenu();
        jMenuArial = new javax.swing.JMenuItem();
        jMenuTahoma = new javax.swing.JMenuItem();
        jMenuTimes = new javax.swing.JMenuItem();
        jMenuPredeterminada = new javax.swing.JMenuItem();
        jMenuTamanio = new javax.swing.JMenu();
        jMenu1Grande = new javax.swing.JMenu();
        jMenu64 = new javax.swing.JMenuItem();
        jMenu54 = new javax.swing.JMenuItem();
        jMenu44 = new javax.swing.JMenuItem();
        jMenu1Mediana = new javax.swing.JMenu();
        jMenu34 = new javax.swing.JMenuItem();
        jMenu24 = new javax.swing.JMenuItem();
        jMenu20 = new javax.swing.JMenuItem();
        jMenu2Pequeña = new javax.swing.JMenu();
        jMenu18 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenuItem();
        jMenuGrande = new javax.swing.JMenuItem();
        jMenuMediana = new javax.swing.JMenuItem();
        Pequeña = new javax.swing.JMenuItem();
        jMenuTipo = new javax.swing.JMenu();
        jCheckBoxNegrita = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuCursiva = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        Copiar.setSelected(true);
        Copiar.setText("jRadioButtonMenuItem1");
        Copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Copiar(evt);
            }
        });
        jPopupMenu1.add(Copiar);

        Cortar.setSelected(true);
        Cortar.setText("jRadioButtonMenuItem2");
        Cortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CortarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Cortar);

        Pegar.setSelected(true);
        Pegar.setText("jRadioButtonMenuItem3");
        Pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PegarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Pegar);

        jMenuItemCopiar.setText("Copiar");
        jMenuItemCopiar.setToolTipText("");

        jMenuItem2.setText("Cortar");

        jMenuItem10.setText("Pegar");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(102, 102, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextArea1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonPulsado(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 420, 297));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        BotonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/open.png"))); // NOI18N
        BotonAbrir.setToolTipText("ABRIR");
        BotonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir(evt);
            }
        });

        BotonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/salior.png"))); // NOI18N
        BotonSalir.setToolTipText("SALIR");
        BotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });

        BotonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar.png"))); // NOI18N
        BotonGuardar.setToolTipText("GUARDAR");
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });

        BotonAdelantar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/adelantar.png"))); // NOI18N
        BotonAdelantar.setToolTipText("ADELANTAR");
        BotonAdelantar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rehacer(evt);
            }
        });

        BotonCortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cortar.png"))); // NOI18N
        BotonCortar.setToolTipText("CORTAR");
        BotonCortar.setEnabled(false);
        BotonCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortar(evt);
            }
        });

        BotonCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/copiar.png"))); // NOI18N
        BotonCopiar.setToolTipText("COPIAR");
        BotonCopiar.setEnabled(false);
        BotonCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiar(evt);
            }
        });

        BotonPegar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pegar.png"))); // NOI18N
        BotonPegar.setToolTipText("PEGAR");
        BotonPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegar(evt);
            }
        });

        BotonRetroceder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volver.png"))); // NOI18N
        BotonRetroceder.setToolTipText("RETROCEDER");
        BotonRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacer(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        botonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png"))); // NOI18N
        botonBuscar.setToolTipText("GUARDAR");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        txtBuscar.setText("Buscar...");
        txtBuscar.setToolTipText("");
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(BotonAbrir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonSalir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonGuardar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonAdelantar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonCortar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonCopiar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonPegar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(BotonRetroceder, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jSeparator3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jSeparator5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(botonBuscar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtBuscar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(BotonAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonCortar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonRetroceder, javax.swing.GroupLayout.PREFERRED_SIZE, 45, Short.MAX_VALUE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BotonAdelantar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BotonAdelantar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonCopiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonPegar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonRetroceder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonCortar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonAbrir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonSalir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBuscar)
                    .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jLayeredPane1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 420, 90));

        labelMover.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        labelMover.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                labelMoverMouseDragged(evt);
            }
        });
        labelMover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelMoverMousePressed(evt);
            }
        });
        getContentPane().add(labelMover, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 440, 460));

        jMenuArchivo.setText("Archivo");

        jMenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuAbrir.setText("Abrir");
        jMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir(evt);
            }
        });
        jMenuArchivo.add(jMenuAbrir);

        jMenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuGuardar.setText("Guardar");
        jMenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });
        jMenuArchivo.add(jMenuGuardar);
        jMenuArchivo.add(jSeparator1);

        jMenuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSalir.setText("Salir");
        jMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });
        jMenuArchivo.add(jMenuSalir);

        jMenuBar1.add(jMenuArchivo);

        jMenuEditar.setText("Edición");
        jMenuEditar.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuSelecionado(evt);
            }
        });

        jMenuCortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuCortar.setText("Cortar");
        jMenuCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortar(evt);
            }
        });
        jMenuEditar.add(jMenuCortar);

        jMenuCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuCopiar.setText("Copiar");
        jMenuCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiar(evt);
            }
        });
        jMenuEditar.add(jMenuCopiar);

        jMenuPegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuPegar.setText("Pegar");
        jMenuPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegar(evt);
            }
        });
        jMenuEditar.add(jMenuPegar);

        jMenuBar1.add(jMenuEditar);

        jMenu3.setText("Opciones");

        jMenuFuente.setText("Fuente");
        jMenuFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fuente(evt);
            }
        });

        jMenuArial.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuArial.setText("Arial");
        jMenuArial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fuente(evt);
            }
        });
        jMenuFuente.add(jMenuArial);

        jMenuTahoma.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuTahoma.setText("Tahoma");
        jMenuTahoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fuente(evt);
            }
        });
        jMenuFuente.add(jMenuTahoma);

        jMenuTimes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        jMenuTimes.setText("TIMES_ROMAN");
        jMenuTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fuente(evt);
            }
        });
        jMenuFuente.add(jMenuTimes);

        jMenuPredeterminada.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuPredeterminada.setText("Predeterminada");
        jMenuPredeterminada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fuente(evt);
            }
        });
        jMenuFuente.add(jMenuPredeterminada);

        jMenu3.add(jMenuFuente);

        jMenuTamanio.setText("Tamaño");
        jMenuTamanio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanio(evt);
            }
        });

        jMenu1Grande.setText("Grande");

        jMenu64.setText("64");
        jMenu64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Grande.add(jMenu64);

        jMenu54.setText("54");
        jMenu54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Grande.add(jMenu54);

        jMenu44.setText("44");
        jMenu44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Grande.add(jMenu44);

        jMenuTamanio.add(jMenu1Grande);

        jMenu1Mediana.setText("Mediana");

        jMenu34.setText("34");
        jMenu34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Mediana.add(jMenu34);

        jMenu24.setText("24");
        jMenu24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Mediana.add(jMenu24);

        jMenu20.setText("20");
        jMenu20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu1Mediana.add(jMenu20);

        jMenuTamanio.add(jMenu1Mediana);

        jMenu2Pequeña.setText("Pequeña");

        jMenu18.setText("18");
        jMenu18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu2Pequeña.add(jMenu18);

        jMenu15.setText("15");
        jMenu15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu2Pequeña.add(jMenu15);

        jMenu10.setText("10");
        jMenu10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanno(evt);
            }
        });
        jMenu2Pequeña.add(jMenu10);

        jMenuTamanio.add(jMenu2Pequeña);

        jMenuGrande.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        jMenuGrande.setText("Grande");
        jMenuGrande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanio(evt);
            }
        });
        jMenuTamanio.add(jMenuGrande);

        jMenuMediana.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        jMenuMediana.setText("Mediana");
        jMenuMediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanio(evt);
            }
        });
        jMenuTamanio.add(jMenuMediana);

        Pequeña.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        Pequeña.setText("Pequeña");
        Pequeña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanio(evt);
            }
        });
        jMenuTamanio.add(Pequeña);

        jMenu3.add(jMenuTamanio);

        jMenuTipo.setText("Tipo");
        jMenuTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoTexto(evt);
            }
        });

        jCheckBoxNegrita.setText("Negrita");
        jCheckBoxNegrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoTexto(evt);
            }
        });
        jMenuTipo.add(jCheckBoxNegrita);

        jCheckBoxMenuCursiva.setText("Cursiva");
        jCheckBoxMenuCursiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoTexto(evt);
            }
        });
        jMenuTipo.add(jCheckBoxMenuCursiva);

        jMenu3.add(jMenuTipo);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Corregir");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Deshacer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacer(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Rehacer");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rehacer(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiar
        jTextArea1.copy();
        BotonCopiar.setToolTipText("Copiar (Ctrl + C)");
    }//GEN-LAST:event_copiar

    private void cortar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortar
        BotonCortar.setToolTipText("Cortar (Ctrl + X)");
        jTextArea1.cut();
    }//GEN-LAST:event_cortar

    private void salir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir
        BotonSalir.setToolTipText("Salir (Ctrl + S)");
        if (jTextArea1.getText().equalsIgnoreCase("")) {
            System.exit(0);
        } else {
            int resp = JOptionPane.showConfirmDialog(null, "¿Desea guardar el documento?", "Alerta!", JOptionPane.YES_NO_OPTION);

            if (resp != 1) {
                guardar(evt);
                System.exit(0);
            } else {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_salir

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jTextArea1.requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void pegar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegar
        BotonPegar.setToolTipText("Pegar (Ctrl + P)");
        jTextArea1.paste();
    }//GEN-LAST:event_pegar


    private void abrir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrir
        BotonAbrir.setToolTipText("Abrir (Ctrl + A)");     //Texto de apoyo punto 8
        //Comprobamos que en el texto haya cosas escritas, y comprobamos que si hay cosas escritas estas esten guardadas, sino no deja abrir
        if (!jTextArea1.getText().matches("[[ ]*[\n]*[\t]]*") && archivoGuardado == false) {//compara si en el JTextArea hay texto sino muestrtra un mensaje en pantalla
            JOptionPane.showMessageDialog(null, "No se puede abrir el documento, tieen que guardar este documento !", "Lo sentimos! Error", JOptionPane.ERROR_MESSAGE);
            archivoGuardado = false; //cambio la variable o bandera
        } else {

            jTextArea1.setText(""); //Limpiamos la pantalla
            String archivoAbrir = "";
            FileNameExtensionFilter filtroTxt = new FileNameExtensionFilter("Texto plano", "txt");
            FileNameExtensionFilter filtroHtml = new FileNameExtensionFilter("Fichero páginas web", "htm", "html");
            FileNameExtensionFilter filtroBat = new FileNameExtensionFilter("Fichero de procesos por lotes", "bat");

            JFileChooser abrir = new JFileChooser();

            abrir.addChoosableFileFilter(filtroTxt);
            abrir.addChoosableFileFilter(filtroHtml);
            abrir.addChoosableFileFilter(filtroBat);
            abrir.setFileFilter(filtroTxt);
            abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int opcion = abrir.showOpenDialog(this);

            if (opcion == JFileChooser.APPROVE_OPTION) {
                try {
                    archivoAbrir = abrir.getSelectedFile().getCanonicalPath();
                    direcciónAbrir = archivoAbrir;//lo guardo para despues

                    System.out.println(archivoAbrir);

                    String cadena;
                    FileReader archivoLectura = new FileReader(archivoAbrir);
                    BufferedReader bufferLectura = new BufferedReader(archivoLectura);
                    this.setTitle(archivoAbrir);
                    while ((cadena = bufferLectura.readLine()) != null) {
                        jTextArea1.setText(jTextArea1.getText() + cadena + "\n");
                    }
                    bufferLectura.close();

                } catch (IOException e) {
                    e.printStackTrace();
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, "No se pudo encontrar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
                //obtener el nombre del fichero
                archivoAbrir = abrir.getSelectedFile().getName();  //guardo el nombre del archivo a abrir
            } else {
                archivoAbrir = "Operación cancelada";
            }
        }
        //JOptionPane.showMessageDialog(null, archivoAbrir);
    }//GEN-LAST:event_abrir

    //ESTE METODO ME SIRVE PARA SABER Y GUARDAR LA EXTENSION DE UN ARCHIVO FILECHOOSER
    public static File getExtensionFichero(JFileChooser guardar) {
        File archivo = guardar.getSelectedFile();

        if (guardar.getFileFilter() instanceof FileNameExtensionFilter) {

            String[] extensiones = ((FileNameExtensionFilter) guardar.getFileFilter()).getExtensions();
            String nameLower = archivo.getName().toLowerCase();
            for (String ext : extensiones) { // Un for each para recorrer el Array
                if (nameLower.endsWith('.' + ext.toLowerCase())) { //Si es verdadero, devuelve el archivo
                    return archivo; // 
                }
            }
            // Si existe devuelve la extension
            archivo = new File(archivo.toString() + '.' + extensiones[0]);
        }
        return archivo;
    }

    private void guardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar
        BotonGuardar.setToolTipText("Guardar (Ctrl + G)");     //Texto de apoyo punto 8       
        String texto = jTextArea1.getText();//variable para comparacion

        if (texto.matches("[[ ]*[\n]*[\t]]*")) {//compara si en el JTextArea hay texto sino muestrtra un mensaje en pantalla
            JOptionPane.showMessageDialog(null, "No hay texto para guardar!", "Lo siento! Error", JOptionPane.ERROR_MESSAGE);
        } else if (direcciónAbrir == null) {       //Si el archivo lo intento sobreescribir
            String mensajeArchivoGuardado = "No se ha podido guardar el contenido, comprueba la extensión dada";
            FileNameExtensionFilter filtroTxt = new FileNameExtensionFilter("Texto plano *.txt", "txt");
            FileNameExtensionFilter filtroHtml = new FileNameExtensionFilter("Fichero páginas web *.html", "html", "html");
            FileNameExtensionFilter filtroBat = new FileNameExtensionFilter("Fichero de procesos por lotes *.bat", "bat");

            JFileChooser guardar = new JFileChooser();

            guardar.addChoosableFileFilter(filtroTxt);
            guardar.addChoosableFileFilter(filtroHtml);
            guardar.addChoosableFileFilter(filtroBat);
            guardar.setFileFilter(filtroTxt);
            guardar.setFileSelectionMode(JFileChooser.FILES_ONLY);

            //String tipoArchivo= getSelectedFileWithExtension(guardar).toString();
            int opcion = guardar.showSaveDialog(this);
            String rutaCompletaConExtension = getExtensionFichero(guardar).toString(); //Guardo la rutaCompleta con la extension selecionada por el usuario
            String extensionSelecionada = rutaCompletaConExtension.substring(rutaCompletaConExtension.lastIndexOf(".") + 1);   //Me quedo solo con la extension para despues concatenarla con el nombre del archivo

            if (opcion == JFileChooser.APPROVE_OPTION) {
                try {

                    System.out.println(mensajeArchivoGuardado);

                    if (guardar != null && extensionSelecionada != null) {
                        File archivoGuardar = guardar.getSelectedFile();
                        FileWriter escribirArchivo = new FileWriter(archivoGuardar + "." + extensionSelecionada);
                        System.out.println(getExtensionFichero(guardar).toString());

                        escribirArchivo.write(jTextArea1.getText());
                        System.out.println(guardar.getFileFilter() == filtroBat);
                        escribirArchivo.close();
                        archivoGuardado = true;
                        //obtener el nombre del fichero
                        mensajeArchivoGuardado = "Se ha guardado " + guardar.getSelectedFile().getName() + "." + extensionSelecionada;  //guardo el nombre del archivo a abrir
                    }
                } catch (IOException e) {
                    // e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "No se pude guardar un archivo sin extension", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, "No se pudo encontrar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                    // e.printStackTrace();

                }
            } else {
                JOptionPane.showMessageDialog(null, "Se ha cancelado la operación", "Error", JOptionPane.ERROR_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, mensajeArchivoGuardado);

        } else { //Esto es una especie de guardar como...
            JOptionPane.showMessageDialog(null, "Se ha guardado el documento", "Guardar como", JOptionPane.WARNING_MESSAGE);
            archivoGuardado = true;
            try {

                System.out.println(direcciónAbrir);

                File archivoGuardar = new File(direcciónAbrir);
                FileWriter escribirArchivo = new FileWriter(archivoGuardar);
                escribirArchivo.write(jTextArea1.getText());
                escribirArchivo.close();

            } catch (IOException e) {
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(null, "No se pudo encontrar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_guardar

    private void cambiarTamanno(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTamanno
        String pulsado = evt.getActionCommand();
        float numEntero = Integer.parseInt(evt.getActionCommand());
        jTextArea1.setFont(jTextArea1.getFont().deriveFont(numEntero));
        System.out.println(numEntero);
    }//GEN-LAST:event_cambiarTamanno

    private void menuSelecionado(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuSelecionado
        /*Muestra las opciones selecionadas */
        boolean textoSelecionado = jTextArea1.getSelectedText() != null;
        jMenuCopiar.setEnabled(textoSelecionado);
        jMenuCortar.setEnabled(textoSelecionado);

    }//GEN-LAST:event_menuSelecionado

    private void jTextArea1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseExited
        boolean textoSelecionado = jTextArea1.getSelectedText() != null;
        BotonCortar.setEnabled(textoSelecionado);
        BotonCopiar.setEnabled(textoSelecionado);
    }//GEN-LAST:event_jTextArea1MouseExited

    private void tamanio(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamanio
        JMenuItem item = (JMenuItem) evt.getSource();

        String recogoTextoSeleccion = item.getText();
        int tamanioo = 12;
        if (recogoTextoSeleccion.equals("Grande")) {
            tamanioo = 24;
        }
        if (recogoTextoSeleccion.equals("Mediana")) {
            tamanioo = 16;
        }
        if (recogoTextoSeleccion.equals("Pequeña")) {
            tamanioo = 12;
        }
        Font fuente = jTextArea1.getFont();
        Font fuenteNueva = new Font(fuente.getName(), fuente.getStyle(), tamanioo);
        jTextArea1.setFont(fuenteNueva);
    }//GEN-LAST:event_tamanio

    private void TipoTexto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoTexto
        int negrita = 0, cursiva = 0;

        if (jCheckBoxMenuCursiva.isSelected()) {
            cursiva = 2;
        }
        if (jCheckBoxNegrita.isSelected()) {
            negrita = 1;
        }

        Font fuente = jTextArea1.getFont();
        fuente = new Font(fuente.getName(), negrita + cursiva, fuente.getSize());
        jTextArea1.setFont(fuente);

    }//GEN-LAST:event_TipoTexto

    private void Fuente(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fuente
        JMenuItem item = (JMenuItem) evt.getSource();

        String recogoTextoSeleccion = item.getText();

        if (recogoTextoSeleccion.equals("Predeterminada")) {
            Font fuente = new Font("Dialog", jTextArea1.getFont().getStyle(), jTextArea1.getFont().getSize());
            jTextArea1.setFont(fuente);
        } else {
            Font fuente = new Font("recogoTextoSeleccion", jTextArea1.getFont().getStyle(), jTextArea1.getFont().getSize());
            jTextArea1.setFont(fuente);
        }
    }//GEN-LAST:event_Fuente

    private void PegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PegarActionPerformed
        pegar(evt);
    }//GEN-LAST:event_PegarActionPerformed

    private void Copiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Copiar
        copiar(evt);
    }//GEN-LAST:event_Copiar

    private void deshacer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacer
        BotonRetroceder.setToolTipText("Deshacer (Ctrl + Z)");
        if (deshacer.canUndo()) {
            deshacer.undo();
        }
    }//GEN-LAST:event_deshacer

    private void rehacer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rehacer
        BotonAdelantar.setToolTipText("Rehacer (Ctrl + Q)");
        if (deshacer.canRedo()) {
            deshacer.redo();
        }
    }//GEN-LAST:event_rehacer

    private void CortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CortarActionPerformed
        cortar(evt);
    }//GEN-LAST:event_CortarActionPerformed

    private void botonPulsado(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonPulsado
// TODO add your handling code here:
        boolean textoSelec = jTextArea1.getSelectedText() != null;
        jMenuCopiar.setEnabled(textoSelec);
        jMenuCortar.setEnabled(textoSelec);
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenu1.show(jTextArea1, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_botonPulsado

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        jTextArea1.setBackground(Color.darkGray);
        buscarpalabra(jTextArea1, txtBuscar.getText());
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void labelMoverMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMoverMouseDragged
        //Lo uso para mover la ventana libremente
        this.setLocation(this.getLocation().x + evt.getX()-x,this.getLocation().y +evt.getY()-y);
    }//GEN-LAST:event_labelMoverMouseDragged

    private void labelMoverMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMoverMousePressed
        x= evt.getX();
        y=evt.getY();
    }//GEN-LAST:event_labelMoverMousePressed

    //Esto nos sirve para hacer una busqueda
    public void buscarpalabra(JTextArea area1, String texto) {
        if (texto.length() >= 0) {
            DefaultHighlighter.DefaultHighlightPainter highlightPainter;

            if (texto.length() >= 1) {
                highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.lightGray);
            } else {
                highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.DARK_GRAY);
                JOptionPane.showMessageDialog(area1, "la palabra a buscar no puede ser vacia");
            }

            Highlighter h = area1.getHighlighter();
            h.removeAllHighlights();
            String text = area1.getText();
            String caracteres = texto;
            Pattern p = Pattern.compile("(?i)" + caracteres);
            Matcher m = p.matcher(text);
            while (m.find()) {
                try {
                    h.addHighlight(m.start(), m.end(), highlightPainter);
                    // System.out.println(h.addHighlight(m.start(), m.end(), highlightPainter));
                } catch (BadLocationException ex) {
                    Logger.getLogger(color.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorTexto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAbrir;
    private javax.swing.JButton BotonAdelantar;
    private javax.swing.JButton BotonCopiar;
    private javax.swing.JButton BotonCortar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton BotonPegar;
    private javax.swing.JButton BotonRetroceder;
    private javax.swing.JButton BotonSalir;
    private javax.swing.JRadioButtonMenuItem Copiar;
    private javax.swing.JRadioButtonMenuItem Cortar;
    private javax.swing.JRadioButtonMenuItem Pegar;
    private javax.swing.JMenuItem Pequeña;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuCursiva;
    private javax.swing.JCheckBoxMenuItem jCheckBoxNegrita;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenu10;
    private javax.swing.JMenuItem jMenu15;
    private javax.swing.JMenuItem jMenu18;
    private javax.swing.JMenu jMenu1Grande;
    private javax.swing.JMenu jMenu1Mediana;
    private javax.swing.JMenuItem jMenu20;
    private javax.swing.JMenuItem jMenu24;
    private javax.swing.JMenu jMenu2Pequeña;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenu34;
    private javax.swing.JMenuItem jMenu44;
    private javax.swing.JMenuItem jMenu54;
    private javax.swing.JMenuItem jMenu64;
    private javax.swing.JMenuItem jMenuAbrir;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenuItem jMenuArial;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCopiar;
    private javax.swing.JMenuItem jMenuCortar;
    private javax.swing.JMenu jMenuEditar;
    private javax.swing.JMenu jMenuFuente;
    private javax.swing.JMenuItem jMenuGrande;
    private javax.swing.JMenuItem jMenuGuardar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemCopiar;
    private javax.swing.JMenuItem jMenuMediana;
    private javax.swing.JMenuItem jMenuPegar;
    private javax.swing.JMenuItem jMenuPredeterminada;
    private javax.swing.JMenuItem jMenuSalir;
    private javax.swing.JMenuItem jMenuTahoma;
    private javax.swing.JMenu jMenuTamanio;
    private javax.swing.JMenuItem jMenuTimes;
    private javax.swing.JMenu jMenuTipo;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelMover;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
    private UndoManager deshacer;
}
